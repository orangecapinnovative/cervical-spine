#!/usr/bin/env node

var program = require('commander')
var axios = require('axios')
var package = require('../package.json')

var hostname_prefix = process.env.SPINAL_HOSTNAME_PREFIX || ''
var hostname_suffix = process.env.SPINAL_HOSTNAME_SUFFIX || ''

function parseData(data){
  if(typeof data == 'undefined') data = 'null'
  try {
    return eval('('+data+')')
  } catch(e) {
    console.error('Error on parsing argumnet data in JSON')
    console.error(e)
    process.exit(1)
  }
}

program
  .version(package.version)

program
  .command('call <method> [data]')
  .option('-t, --timeout [miliseconds]', 'Request Timeout in miliseconds', /^([0-9]+)$/, '10000')
  .option('-p, --port [port number]', 'Request port number', /^([0-9]{2,5})$/, '7557')
  .option('-H, --host [host name]', 'Request host name', /^(.+)$/, '')
  .description('call spinal method')
  .action(function(method, data, options){
    data = parseData(data)
    var match = method.match(/^(.+)\.(.+)$/)
    if (options.host === '') {
      if (process.env.NODE_ENV !== 'production' || process.env.NODE_ENV !== 'staging') {
        options.host = 'localhost'
      } else {
        options.host = match[1]
      }
    }
    
    var axiosOptions = {}
    if (options.timeout) axiosOptions.timeout = parseInt(options.timeout)
    var host = hostname_prefix + options.host + hostname_suffix
    var name = ''
    if (!match || !match[1] || !match[2]) {
      if (options.host !== 'localhost') {
        console.error('Invalid method format')
        process.exit(1)
      }
      name = method
    } else {
      name = match[2]
    }
    axios.post('http://' + options.host + ':' + options.port, {
      name: name,
      data: data,
      options: {}
    }, axiosOptions)
    .then(function(resp) {
      process.stdout.write(resp.data + '\n')
      return resp
    })
    .catch(function(err) {
      console.error(err.toString())
      process.exit(1)
    })
  })

program.parse(process.argv)
if (!process.argv.slice(2).length) program.outputHelp()